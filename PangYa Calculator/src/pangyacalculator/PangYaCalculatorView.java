/*
 * PangYaCalculatorView.java
 */

package pangyacalculator;

import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.text.DecimalFormat;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;

/**
 * The application's PangYaCalculatorApps frame.
 */
public class PangYaCalculatorView extends FrameView {

    public PangYaCalculatorView(SingleFrameApplication app) {
        super(app);

        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = PangYaCalculatorApps.getApplication().getMainFrame();
            aboutBox = new PangYaCalculatorAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        PangYaCalculatorApps.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        Degree = new javax.swing.JLabel();
        Windspeed = new javax.swing.JLabel();
        HWI = new javax.swing.JLabel();
        DegreeTextField = new javax.swing.JTextField();
        WindspeedTextField = new javax.swing.JTextField();
        HWITextField = new javax.swing.JTextField();
        Pb = new javax.swing.JLabel();
        PbTextField = new javax.swing.JTextField();
        HWICalculator = new javax.swing.JLabel();
        Power = new javax.swing.JLabel();
        WindSpeedPower = new javax.swing.JLabel();
        Elevation = new javax.swing.JLabel();
        TerrainEffect = new javax.swing.JLabel();
        Result = new javax.swing.JLabel();
        TerrainEffectComboBox = new javax.swing.JComboBox();
        PowerTextField = new javax.swing.JTextField();
        WindSpeedPowerTextField = new javax.swing.JTextField();
        ElevationTextField = new javax.swing.JTextField();
        ResultTextField = new javax.swing.JTextField();
        PowerCalculator = new javax.swing.JLabel();
        WindDegreePower = new javax.swing.JLabel();
        WindDegreePowerTextField = new javax.swing.JTextField();
        PowerHWI = new javax.swing.JLabel();
        PowerHWITextField = new javax.swing.JTextField();
        DegreeInfo = new javax.swing.JLabel();
        WindSpeedInfo = new javax.swing.JLabel();
        HWIInfo = new javax.swing.JLabel();
        PBInfo = new javax.swing.JLabel();
        PowerInfo = new javax.swing.JLabel();
        PowerHWIInfo = new javax.swing.JLabel();
        WindspeedpowerInfo = new javax.swing.JLabel();
        WindDegreeInfo = new javax.swing.JLabel();
        ElevationInfo = new javax.swing.JLabel();
        TerrainEffectInfo = new javax.swing.JLabel();
        ResultInfo = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        mainPanel.setMaximumSize(new java.awt.Dimension(300, 400));
        mainPanel.setMinimumSize(new java.awt.Dimension(300, 400));
        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setPreferredSize(new java.awt.Dimension(300, 400));

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(pangyacalculator.PangYaCalculatorApps.class).getContext().getResourceMap(PangYaCalculatorView.class);
        Degree.setFont(resourceMap.getFont("Degree.font")); // NOI18N
        Degree.setText(resourceMap.getString("Degree.text")); // NOI18N
        Degree.setToolTipText(resourceMap.getString("Degree.toolTipText")); // NOI18N
        Degree.setName("Degree"); // NOI18N

        Windspeed.setFont(resourceMap.getFont("Windspeed.font")); // NOI18N
        Windspeed.setText(resourceMap.getString("Windspeed.text")); // NOI18N
        Windspeed.setToolTipText(resourceMap.getString("Windspeed.toolTipText")); // NOI18N
        Windspeed.setName("Windspeed"); // NOI18N

        HWI.setFont(resourceMap.getFont("HWI.font")); // NOI18N
        HWI.setText(resourceMap.getString("HWI.text")); // NOI18N
        HWI.setToolTipText(resourceMap.getString("HWI.toolTipText")); // NOI18N
        HWI.setName("HWI"); // NOI18N

        DegreeTextField.setText(resourceMap.getString("DegreeTextField.text")); // NOI18N
        DegreeTextField.setToolTipText(resourceMap.getString("DegreeTextField.toolTipText")); // NOI18N
        DegreeTextField.setName("DegreeTextField"); // NOI18N
        DegreeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                DegreeTextFieldKeyPressed(evt);
            }
        });

        WindspeedTextField.setText(resourceMap.getString("WindspeedTextField.text")); // NOI18N
        WindspeedTextField.setToolTipText(resourceMap.getString("WindspeedTextField.toolTipText")); // NOI18N
        WindspeedTextField.setName("WindspeedTextField"); // NOI18N
        WindspeedTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                WindspeedTextFieldKeyPressed(evt);
            }
        });

        HWITextField.setText(resourceMap.getString("HWITextField.text")); // NOI18N
        HWITextField.setToolTipText(resourceMap.getString("HWITextField.toolTipText")); // NOI18N
        HWITextField.setName("HWITextField"); // NOI18N
        HWITextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                HWITextFieldKeyPressed(evt);
            }
        });

        Pb.setFont(resourceMap.getFont("Pb.font")); // NOI18N
        Pb.setText(resourceMap.getString("Pb.text")); // NOI18N
        Pb.setToolTipText(resourceMap.getString("Pb.toolTipText")); // NOI18N
        Pb.setName("Pb"); // NOI18N

        PbTextField.setEditable(false);
        PbTextField.setText(resourceMap.getString("PbTextField.text")); // NOI18N
        PbTextField.setToolTipText(resourceMap.getString("PbTextField.toolTipText")); // NOI18N
        PbTextField.setName("PbTextField"); // NOI18N

        HWICalculator.setFont(resourceMap.getFont("HWICalculator.font")); // NOI18N
        HWICalculator.setText(resourceMap.getString("HWICalculator.text")); // NOI18N
        HWICalculator.setToolTipText(resourceMap.getString("HWICalculator.toolTipText")); // NOI18N
        HWICalculator.setName("HWICalculator"); // NOI18N

        Power.setFont(resourceMap.getFont("Power.font")); // NOI18N
        Power.setText(resourceMap.getString("Power.text")); // NOI18N
        Power.setToolTipText(resourceMap.getString("Power.toolTipText")); // NOI18N
        Power.setName("Power"); // NOI18N

        WindSpeedPower.setFont(resourceMap.getFont("WindSpeedPower.font")); // NOI18N
        WindSpeedPower.setText(resourceMap.getString("WindSpeedPower.text")); // NOI18N
        WindSpeedPower.setToolTipText(resourceMap.getString("WindSpeedPower.toolTipText")); // NOI18N
        WindSpeedPower.setName("WindSpeedPower"); // NOI18N

        Elevation.setFont(resourceMap.getFont("Elevation.font")); // NOI18N
        Elevation.setText(resourceMap.getString("Elevation.text")); // NOI18N
        Elevation.setToolTipText(resourceMap.getString("Elevation.toolTipText")); // NOI18N
        Elevation.setName("Elevation"); // NOI18N

        TerrainEffect.setFont(resourceMap.getFont("TerrainEffect.font")); // NOI18N
        TerrainEffect.setText(resourceMap.getString("TerrainEffect.text")); // NOI18N
        TerrainEffect.setToolTipText(resourceMap.getString("TerrainEffect.toolTipText")); // NOI18N
        TerrainEffect.setName("TerrainEffect"); // NOI18N

        Result.setFont(resourceMap.getFont("Result.font")); // NOI18N
        Result.setText(resourceMap.getString("Result.text")); // NOI18N
        Result.setToolTipText(resourceMap.getString("Result.toolTipText")); // NOI18N
        Result.setName("Result"); // NOI18N

        TerrainEffectComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "100% [Fairway, Ice]", "98% [Raining]", "95% [Rough]", "92% [Rough + Raining]", "90% [Rough, Bunker]", "85% [Bunker]" }));
        TerrainEffectComboBox.setToolTipText(resourceMap.getString("TerrainEffectComboBox.toolTipText")); // NOI18N
        TerrainEffectComboBox.setName("TerrainEffectComboBox"); // NOI18N

        PowerTextField.setText(resourceMap.getString("PowerTextField.text")); // NOI18N
        PowerTextField.setToolTipText(resourceMap.getString("PowerTextField.toolTipText")); // NOI18N
        PowerTextField.setName("PowerTextField"); // NOI18N
        PowerTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                PowerTextFieldKeyPressed(evt);
            }
        });

        WindSpeedPowerTextField.setText(resourceMap.getString("WindSpeedPowerTextField.text")); // NOI18N
        WindSpeedPowerTextField.setToolTipText(resourceMap.getString("WindSpeedPowerTextField.toolTipText")); // NOI18N
        WindSpeedPowerTextField.setName("WindSpeedPowerTextField"); // NOI18N
        WindSpeedPowerTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                WindSpeedPowerTextFieldKeyPressed(evt);
            }
        });

        ElevationTextField.setText(resourceMap.getString("ElevationTextField.text")); // NOI18N
        ElevationTextField.setToolTipText(resourceMap.getString("ElevationTextField.toolTipText")); // NOI18N
        ElevationTextField.setName("ElevationTextField"); // NOI18N
        ElevationTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ElevationTextFieldKeyPressed(evt);
            }
        });

        ResultTextField.setEditable(false);
        ResultTextField.setText(resourceMap.getString("ResultTextField.text")); // NOI18N
        ResultTextField.setToolTipText(resourceMap.getString("ResultTextField.toolTipText")); // NOI18N
        ResultTextField.setName("ResultTextField"); // NOI18N

        PowerCalculator.setFont(resourceMap.getFont("PowerCalculator.font")); // NOI18N
        PowerCalculator.setText(resourceMap.getString("PowerCalculator.text")); // NOI18N
        PowerCalculator.setToolTipText(resourceMap.getString("PowerCalculator.toolTipText")); // NOI18N
        PowerCalculator.setName("PowerCalculator"); // NOI18N

        WindDegreePower.setFont(resourceMap.getFont("WindDegreePower.font")); // NOI18N
        WindDegreePower.setText(resourceMap.getString("WindDegreePower.text")); // NOI18N
        WindDegreePower.setName("WindDegreePower"); // NOI18N

        WindDegreePowerTextField.setText(resourceMap.getString("WindDegreePowerTextField.text")); // NOI18N
        WindDegreePowerTextField.setToolTipText(resourceMap.getString("WindDegreePowerTextField.toolTipText")); // NOI18N
        WindDegreePowerTextField.setName("WindDegreePowerTextField"); // NOI18N
        WindDegreePowerTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                WindDegreePowerTextFieldKeyPressed(evt);
            }
        });

        PowerHWI.setFont(resourceMap.getFont("PowerHWI.font")); // NOI18N
        PowerHWI.setText(resourceMap.getString("PowerHWI.text")); // NOI18N
        PowerHWI.setName("PowerHWI"); // NOI18N

        PowerHWITextField.setText(resourceMap.getString("PowerHWITextField.text")); // NOI18N
        PowerHWITextField.setToolTipText(resourceMap.getString("PowerHWITextField.toolTipText")); // NOI18N
        PowerHWITextField.setName("PowerHWITextField"); // NOI18N
        PowerHWITextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                PowerHWITextFieldKeyPressed(evt);
            }
        });

        DegreeInfo.setIcon(resourceMap.getIcon("DegreeInfo.icon")); // NOI18N
        DegreeInfo.setText(resourceMap.getString("DegreeInfo.text")); // NOI18N
        DegreeInfo.setToolTipText(resourceMap.getString("DegreeInfo.toolTipText")); // NOI18N
        DegreeInfo.setName("DegreeInfo"); // NOI18N

        WindSpeedInfo.setIcon(resourceMap.getIcon("WindSpeedInfo.icon")); // NOI18N
        WindSpeedInfo.setText(resourceMap.getString("WindSpeedInfo.text")); // NOI18N
        WindSpeedInfo.setToolTipText(resourceMap.getString("WindSpeedInfo.toolTipText")); // NOI18N
        WindSpeedInfo.setName("WindSpeedInfo"); // NOI18N

        HWIInfo.setIcon(resourceMap.getIcon("HWIInfo.icon")); // NOI18N
        HWIInfo.setText(resourceMap.getString("HWIInfo.text")); // NOI18N
        HWIInfo.setToolTipText(resourceMap.getString("HWIInfo.toolTipText")); // NOI18N
        HWIInfo.setName("HWIInfo"); // NOI18N

        PBInfo.setIcon(resourceMap.getIcon("PBInfo.icon")); // NOI18N
        PBInfo.setText(resourceMap.getString("PBInfo.text")); // NOI18N
        PBInfo.setToolTipText(resourceMap.getString("PBInfo.toolTipText")); // NOI18N
        PBInfo.setName("PBInfo"); // NOI18N

        PowerInfo.setIcon(resourceMap.getIcon("PowerInfo.icon")); // NOI18N
        PowerInfo.setText(resourceMap.getString("PowerInfo.text")); // NOI18N
        PowerInfo.setToolTipText(resourceMap.getString("PowerInfo.toolTipText")); // NOI18N
        PowerInfo.setName("PowerInfo"); // NOI18N

        PowerHWIInfo.setIcon(resourceMap.getIcon("PowerHWIInfo.icon")); // NOI18N
        PowerHWIInfo.setText(resourceMap.getString("PowerHWIInfo.text")); // NOI18N
        PowerHWIInfo.setToolTipText(resourceMap.getString("PowerHWIInfo.toolTipText")); // NOI18N
        PowerHWIInfo.setName("PowerHWIInfo"); // NOI18N

        WindspeedpowerInfo.setIcon(resourceMap.getIcon("WindspeedpowerInfo.icon")); // NOI18N
        WindspeedpowerInfo.setText(resourceMap.getString("WindspeedpowerInfo.text")); // NOI18N
        WindspeedpowerInfo.setName("WindspeedpowerInfo"); // NOI18N

        WindDegreeInfo.setIcon(resourceMap.getIcon("WindDegreeInfo.icon")); // NOI18N
        WindDegreeInfo.setText(resourceMap.getString("WindDegreeInfo.text")); // NOI18N
        WindDegreeInfo.setToolTipText(resourceMap.getString("WindDegreeInfo.toolTipText")); // NOI18N
        WindDegreeInfo.setName("WindDegreeInfo"); // NOI18N

        ElevationInfo.setIcon(resourceMap.getIcon("ElevationInfo.icon")); // NOI18N
        ElevationInfo.setText(resourceMap.getString("ElevationInfo.text")); // NOI18N
        ElevationInfo.setToolTipText(resourceMap.getString("ElevationInfo.toolTipText")); // NOI18N
        ElevationInfo.setName("ElevationInfo"); // NOI18N

        TerrainEffectInfo.setIcon(resourceMap.getIcon("TerrainEffectInfo.icon")); // NOI18N
        TerrainEffectInfo.setText(resourceMap.getString("TerrainEffectInfo.text")); // NOI18N
        TerrainEffectInfo.setToolTipText(resourceMap.getString("TerrainEffectInfo.toolTipText")); // NOI18N
        TerrainEffectInfo.setName("TerrainEffectInfo"); // NOI18N

        ResultInfo.setIcon(resourceMap.getIcon("ResultInfo.icon")); // NOI18N
        ResultInfo.setText(resourceMap.getString("ResultInfo.text")); // NOI18N
        ResultInfo.setToolTipText(resourceMap.getString("ResultInfo.toolTipText")); // NOI18N
        ResultInfo.setName("ResultInfo"); // NOI18N

        org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(PowerCalculator)
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(TerrainEffect)
                            .add(WindSpeedPower)
                            .add(WindDegreePower)
                            .add(Elevation)
                            .add(PowerHWI)
                            .add(Power)
                            .add(Result))
                        .add(32, 32, 32)
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(PowerHWIInfo)
                            .add(WindspeedpowerInfo)
                            .add(mainPanelLayout.createSequentialGroup()
                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(mainPanelLayout.createSequentialGroup()
                                        .add(1, 1, 1)
                                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                            .add(TerrainEffectInfo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .add(ElevationInfo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .add(ResultInfo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .add(WindDegreeInfo)))
                                    .add(PowerInfo))
                                .add(8, 8, 8)
                                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(PowerTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                                    .add(PowerHWITextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                                    .add(mainPanelLayout.createSequentialGroup()
                                        .add(1, 1, 1)
                                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(ResultTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                                            .add(org.jdesktop.layout.GroupLayout.TRAILING, WindDegreePowerTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                                            .add(WindSpeedPowerTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                                            .add(org.jdesktop.layout.GroupLayout.TRAILING, ElevationTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                                            .add(org.jdesktop.layout.GroupLayout.TRAILING, TerrainEffectComboBox, 0, 170, Short.MAX_VALUE)))))))
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(107, 107, 107)
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(mainPanelLayout.createSequentialGroup()
                                .add(DegreeInfo)
                                .add(10, 10, 10)
                                .add(DegreeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 170, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(mainPanelLayout.createSequentialGroup()
                                .add(WindSpeedInfo)
                                .add(10, 10, 10)
                                .add(WindspeedTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 170, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(mainPanelLayout.createSequentialGroup()
                                .add(HWIInfo)
                                .add(10, 10, 10)
                                .add(HWITextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 170, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(mainPanelLayout.createSequentialGroup()
                                .add(PBInfo)
                                .add(10, 10, 10)
                                .add(PbTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 170, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(HWICalculator)
                    .add(Degree)
                    .add(Windspeed)
                    .add(HWI)
                    .add(Pb))
                .add(282, 282, 282))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(HWICalculator)
                .add(13, 13, 13)
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(Degree)
                        .add(11, 11, 11)
                        .add(Windspeed)
                        .add(11, 11, 11)
                        .add(HWI)
                        .add(11, 11, 11)
                        .add(Pb)
                        .add(5, 5, 5))
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(DegreeInfo)
                            .add(DegreeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(6, 6, 6)
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(WindSpeedInfo)
                            .add(WindspeedTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(6, 6, 6)
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(HWIInfo)
                            .add(HWITextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(6, 6, 6)
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(PBInfo)
                            .add(PbTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .add(11, 11, 11)
                .add(PowerCalculator)
                .add(10, 10, 10)
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(Power)
                    .add(PowerInfo)
                    .add(PowerTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(PowerHWITextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(WindSpeedPowerTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(WindDegreePowerTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(ElevationTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(TerrainEffectComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(ResultTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, PowerHWI)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, PowerHWIInfo))
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(mainPanelLayout.createSequentialGroup()
                                .add(10, 10, 10)
                                .add(WindspeedpowerInfo)
                                .add(12, 12, 12)
                                .add(WindDegreeInfo))
                            .add(mainPanelLayout.createSequentialGroup()
                                .add(13, 13, 13)
                                .add(WindSpeedPower)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(WindDegreePower)))
                        .add(10, 10, 10)
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(mainPanelLayout.createSequentialGroup()
                                .add(Elevation)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(TerrainEffect)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(Result))
                            .add(mainPanelLayout.createSequentialGroup()
                                .add(ElevationInfo)
                                .add(10, 10, 10)
                                .add(TerrainEffectInfo)
                                .add(12, 12, 12)
                                .add(ResultInfo)))))
                .add(90, 90, 90))
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        exitMenuItem.setAlignmentX(0.0F);
        exitMenuItem.setAlignmentY(0.0F);
        exitMenuItem.setContentAreaFilled(false);
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(pangyacalculator.PangYaCalculatorApps.class).getContext().getActionMap(PangYaCalculatorView.class, this);
        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        org.jdesktop.layout.GroupLayout statusPanelLayout = new org.jdesktop.layout.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(statusPanelSeparator, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
            .add(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(statusMessageLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 155, Short.MAX_VALUE)
                .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(statusPanelLayout.createSequentialGroup()
                .add(statusPanelSeparator, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(statusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(statusMessageLabel)
                    .add(statusAnimationLabel)
                    .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void DegreeTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DegreeTextFieldKeyPressed
         try
        {
            int key = evt.getKeyCode();
            if(key == KeyEvent.VK_ENTER)
            {
                Double Degree = Double.parseDouble(DegreeTextField.getText());
                Double Windspeed = Double.parseDouble(WindspeedTextField.getText());
                Double HWI = Double.parseDouble(HWITextField.getText());
                Double Pin = ((((Math.sin(Math.toRadians(Degree))))*Windspeed)*HWI);
                DecimalFormat twoDForm = new DecimalFormat("#.##");
                PbTextField.setText(twoDForm.format(Pin));
            }
        }
        catch(Exception E)
        {

        }
    }//GEN-LAST:event_DegreeTextFieldKeyPressed

    private void WindspeedTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_WindspeedTextFieldKeyPressed
            try
        {
            int key = evt.getKeyCode();
            if(key == KeyEvent.VK_ENTER)
            {
                Double Degree = Double.parseDouble(DegreeTextField.getText());
                Double Windspeed = Double.parseDouble(WindspeedTextField.getText());
                Double HWI = Double.parseDouble(HWITextField.getText());
                Double Pin = ((((Math.sin(Math.toRadians(Degree))))*Windspeed)*HWI);
                DecimalFormat twoDForm = new DecimalFormat("#.##");
                PbTextField.setText(twoDForm.format(Pin));
            }
        }
        catch(Exception E)
        {

        }
    }//GEN-LAST:event_WindspeedTextFieldKeyPressed

    private void HWITextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_HWITextFieldKeyPressed
            try
        {
            int key = evt.getKeyCode();
            if(key == KeyEvent.VK_ENTER)
            {
                Double Degree = Double.parseDouble(DegreeTextField.getText());
                Double Windspeed = Double.parseDouble(WindspeedTextField.getText());
                Double HWI = Double.parseDouble(HWITextField.getText());
                Double Pin = ((((Math.sin(Math.toRadians(Degree))))*Windspeed)*HWI);
                DecimalFormat twoDForm = new DecimalFormat("#.##");
                PbTextField.setText(twoDForm.format(Pin));
            }
            
        }
        catch(Exception E)
        {

        }
    }//GEN-LAST:event_HWITextFieldKeyPressed

    private void PowerTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PowerTextFieldKeyPressed
       try
        {
            int key = evt.getKeyCode();
            if(key == KeyEvent.VK_ENTER)
            {
                if(TerrainEffectComboBox.getSelectedIndex()==0)
                {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 0;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }
                else if (TerrainEffectComboBox.getSelectedIndex()==1)
                {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 3;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }
                else if (TerrainEffectComboBox.getSelectedIndex()==2)
                {
                   Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 4;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }
                else if (TerrainEffectComboBox.getSelectedIndex()==3)
                {
                     Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 7;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }
                else if (TerrainEffectComboBox.getSelectedIndex()==4)
                {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 8;
                   Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }
                else if (TerrainEffectComboBox.getSelectedIndex()==5)
                {
                   Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 12;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }

            }
        }
        catch(Exception E)
        {

        }
    }//GEN-LAST:event_PowerTextFieldKeyPressed

    private void ElevationTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ElevationTextFieldKeyPressed
        try
        {
            int key = evt.getKeyCode();
            if(key == KeyEvent.VK_ENTER)
            {
                if(TerrainEffectComboBox.getSelectedIndex()==0)
                {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 0;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }
                else if (TerrainEffectComboBox.getSelectedIndex()==1)
                {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 3;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }
                else if (TerrainEffectComboBox.getSelectedIndex()==2)
                {
                   Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 4;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }
                else if (TerrainEffectComboBox.getSelectedIndex()==3)
                {
                     Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 7;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }
                else if (TerrainEffectComboBox.getSelectedIndex()==4)
                {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 8;
                   Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }
                else if (TerrainEffectComboBox.getSelectedIndex()==5)
                {
                   Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 12;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }

            }
        }
        catch(Exception E)
        {

        }
    }//GEN-LAST:event_ElevationTextFieldKeyPressed

    private void WindSpeedPowerTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_WindSpeedPowerTextFieldKeyPressed
        try
        {
            int key = evt.getKeyCode();
            if(key == KeyEvent.VK_ENTER)
            {
                if(TerrainEffectComboBox.getSelectedIndex()==0)
                {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 0;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }
                else if (TerrainEffectComboBox.getSelectedIndex()==1)
                {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 3;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }
                else if (TerrainEffectComboBox.getSelectedIndex()==2)
                {
                   Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 4;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }
                else if (TerrainEffectComboBox.getSelectedIndex()==3)
                {
                     Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 7;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }
                else if (TerrainEffectComboBox.getSelectedIndex()==4)
                {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 8;
                   Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }
                else if (TerrainEffectComboBox.getSelectedIndex()==5)
                {
                   Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 12;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }

            }
        }
        catch(Exception E)
        {

        }
}//GEN-LAST:event_WindSpeedPowerTextFieldKeyPressed

    private void WindDegreePowerTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_WindDegreePowerTextFieldKeyPressed
        try
        {
            int key = evt.getKeyCode();
            if(key == KeyEvent.VK_ENTER)
            {
                if(TerrainEffectComboBox.getSelectedIndex()==0)
                {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 0;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }
                else if (TerrainEffectComboBox.getSelectedIndex()==1)
                {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 3;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }
                else if (TerrainEffectComboBox.getSelectedIndex()==2)
                {
                   Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 4;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }
                else if (TerrainEffectComboBox.getSelectedIndex()==3)
                {
                     Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 7;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }
                else if (TerrainEffectComboBox.getSelectedIndex()==4)
                {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 8;
                   Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }
                else if (TerrainEffectComboBox.getSelectedIndex()==5)
                {
                   Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 12;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }

            }
        }
        catch(Exception E)
        {

        }


    }//GEN-LAST:event_WindDegreePowerTextFieldKeyPressed

    private void PowerHWITextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PowerHWITextFieldKeyPressed
        try
        {
            int key = evt.getKeyCode();
            if(key == KeyEvent.VK_ENTER)
            {
                if(TerrainEffectComboBox.getSelectedIndex()==0)
                {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 0;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }
                else if (TerrainEffectComboBox.getSelectedIndex()==1)
                {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 3;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }
                else if (TerrainEffectComboBox.getSelectedIndex()==2)
                {
                   Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 4;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }
                else if (TerrainEffectComboBox.getSelectedIndex()==3)
                {
                     Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 7;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }
                else if (TerrainEffectComboBox.getSelectedIndex()==4)
                {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 8;
                   Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }
                else if (TerrainEffectComboBox.getSelectedIndex()==5)
                {
                   Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 12;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }

            }
        }
        catch(Exception E)
        {

        }
    }//GEN-LAST:event_PowerHWITextFieldKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Degree;
    private javax.swing.JLabel DegreeInfo;
    private javax.swing.JTextField DegreeTextField;
    private javax.swing.JLabel Elevation;
    private javax.swing.JLabel ElevationInfo;
    private javax.swing.JTextField ElevationTextField;
    private javax.swing.JLabel HWI;
    private javax.swing.JLabel HWICalculator;
    private javax.swing.JLabel HWIInfo;
    private javax.swing.JTextField HWITextField;
    private javax.swing.JLabel PBInfo;
    private javax.swing.JLabel Pb;
    private javax.swing.JTextField PbTextField;
    private javax.swing.JLabel Power;
    private javax.swing.JLabel PowerCalculator;
    private javax.swing.JLabel PowerHWI;
    private javax.swing.JLabel PowerHWIInfo;
    private javax.swing.JTextField PowerHWITextField;
    private javax.swing.JLabel PowerInfo;
    private javax.swing.JTextField PowerTextField;
    private javax.swing.JLabel Result;
    private javax.swing.JLabel ResultInfo;
    private javax.swing.JTextField ResultTextField;
    private javax.swing.JLabel TerrainEffect;
    private javax.swing.JComboBox TerrainEffectComboBox;
    private javax.swing.JLabel TerrainEffectInfo;
    private javax.swing.JLabel WindDegreeInfo;
    private javax.swing.JLabel WindDegreePower;
    private javax.swing.JTextField WindDegreePowerTextField;
    private javax.swing.JLabel WindSpeedInfo;
    private javax.swing.JLabel WindSpeedPower;
    private javax.swing.JTextField WindSpeedPowerTextField;
    private javax.swing.JLabel Windspeed;
    private javax.swing.JTextField WindspeedTextField;
    private javax.swing.JLabel WindspeedpowerInfo;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;
}
