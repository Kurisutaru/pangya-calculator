
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.lang.reflect.Method;
import java.text.DecimalFormat;
import javax.swing.JOptionPane;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on Nov 30, 2010, 10:32:28 PM
 */

/**
 *
 * @author Kurisutaru
 */
public class MainFrame extends javax.swing.JFrame {

    /** Creates new form MainFrame */
    public MainFrame() {

        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AboutBox = new javax.swing.JDialog();
        javax.swing.JLabel appTitleLabel = new javax.swing.JLabel();
        javax.swing.JLabel versionLabel = new javax.swing.JLabel();
        javax.swing.JLabel appVersionLabel = new javax.swing.JLabel();
        javax.swing.JLabel vendorLabel = new javax.swing.JLabel();
        javax.swing.JLabel appVendorLabel = new javax.swing.JLabel();
        javax.swing.JLabel homepageLabel = new javax.swing.JLabel();
        javax.swing.JLabel appHomepageLabel = new javax.swing.JLabel();
        javax.swing.JLabel appDescLabel = new javax.swing.JLabel();
        javax.swing.JLabel imageLabel = new javax.swing.JLabel();
        EmailAdress = new javax.swing.JLabel();
        SpecialThanks = new javax.swing.JLabel();
        MySTiC = new javax.swing.JLabel();
        Rose = new javax.swing.JLabel();
        Close = new javax.swing.JButton();
        Power = new javax.swing.JLabel();
        WindSpeedPower = new javax.swing.JLabel();
        PbTextField = new javax.swing.JTextField();
        HWICalculator = new javax.swing.JLabel();
        Result = new javax.swing.JLabel();
        TerrainEffectComboBox = new javax.swing.JComboBox();
        Elevation = new javax.swing.JLabel();
        TerrainEffect = new javax.swing.JLabel();
        ResultInfo = new javax.swing.JLabel();
        TerrainEffectInfo = new javax.swing.JLabel();
        ElevationInfo = new javax.swing.JLabel();
        WindDegreeInfo = new javax.swing.JLabel();
        WindspeedpowerInfo = new javax.swing.JLabel();
        PowerHWIInfo = new javax.swing.JLabel();
        PBInfo = new javax.swing.JLabel();
        PowerInfo = new javax.swing.JLabel();
        WindSpeedInfo = new javax.swing.JLabel();
        HWIInfo = new javax.swing.JLabel();
        Pb = new javax.swing.JLabel();
        HWITextField = new javax.swing.JTextField();
        ResultTextField = new javax.swing.JTextField();
        Degree = new javax.swing.JLabel();
        PowerCalculator = new javax.swing.JLabel();
        Windspeed = new javax.swing.JLabel();
        WindDegreePower = new javax.swing.JLabel();
        HWI = new javax.swing.JLabel();
        WindDegreePowerTextField = new javax.swing.JTextField();
        DegreeTextField = new javax.swing.JTextField();
        PowerHWI = new javax.swing.JLabel();
        PowerHWITextField = new javax.swing.JTextField();
        DegreeInfo = new javax.swing.JLabel();
        WindspeedTextField = new javax.swing.JTextField();
        PowerTextField = new javax.swing.JTextField();
        ElevationTextField = new javax.swing.JTextField();
        WindSpeedPowerTextField = new javax.swing.JTextField();
        MenuBar = new javax.swing.JMenuBar();
        Menu = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        Exit = new javax.swing.JMenuItem();
        Help = new javax.swing.JMenu();
        About = new javax.swing.JMenuItem();

        AboutBox.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        AboutBox.setTitle("About: PangYa HWI Calculator 1.0.0.0b ");
        AboutBox.setMinimumSize(new java.awt.Dimension(565, 378));
        AboutBox.setModal(true);
        AboutBox.setResizable(false);
        AboutBox.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        appTitleLabel.setFont(appTitleLabel.getFont().deriveFont(appTitleLabel.getFont().getStyle() | java.awt.Font.BOLD, appTitleLabel.getFont().getSize()+4));
        appTitleLabel.setText("PangYa HWI Calculator");
        AboutBox.getContentPane().add(appTitleLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(255, 11, -1, -1));

        versionLabel.setFont(versionLabel.getFont().deriveFont(versionLabel.getFont().getStyle() | java.awt.Font.BOLD));
        versionLabel.setText("Product Version:");
        AboutBox.getContentPane().add(versionLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(255, 56, -1, -1));

        appVersionLabel.setText("1.0.0.0b");
        AboutBox.getContentPane().add(appVersionLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(353, 56, -1, -1));

        vendorLabel.setFont(vendorLabel.getFont().deriveFont(vendorLabel.getFont().getStyle() | java.awt.Font.BOLD));
        vendorLabel.setText("Creator:");
        AboutBox.getContentPane().add(vendorLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(255, 76, -1, -1));

        appVendorLabel.setText("Kurisutaru.");
        AboutBox.getContentPane().add(appVendorLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(353, 76, -1, -1));

        homepageLabel.setFont(homepageLabel.getFont().deriveFont(homepageLabel.getFont().getStyle() | java.awt.Font.BOLD));
        homepageLabel.setText("Email:");
        AboutBox.getContentPane().add(homepageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(255, 96, -1, -1));
        AboutBox.getContentPane().add(appHomepageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(353, 96, -1, -1));

        appDescLabel.setText("A simple Calculator that calculate HWI Adjustment");
        AboutBox.getContentPane().add(appDescLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(255, 36, 284, -1));

        imageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/aboutme.png"))); // NOI18N
        AboutBox.getContentPane().add(imageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        EmailAdress.setText("Hk_Heaven_Kingdom@yahoo.com");
        AboutBox.getContentPane().add(EmailAdress, new org.netbeans.lib.awtextra.AbsoluteConstraints(353, 96, -1, -1));

        SpecialThanks.setFont(new java.awt.Font("Tahoma", 1, 11));
        SpecialThanks.setText("Special Thanks:");
        AboutBox.getContentPane().add(SpecialThanks, new org.netbeans.lib.awtextra.AbsoluteConstraints(255, 116, -1, -1));

        MySTiC.setFont(new java.awt.Font("Tahoma", 1, 12));
        MySTiC.setText("MySTiC");
        AboutBox.getContentPane().add(MySTiC, new org.netbeans.lib.awtextra.AbsoluteConstraints(353, 125, -1, -1));

        Rose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/039.gif"))); // NOI18N
        AboutBox.getContentPane().add(Rose, new org.netbeans.lib.awtextra.AbsoluteConstraints(403, 116, -1, -1));

        Close.setText("Close");
        Close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseActionPerformed(evt);
            }
        });
        AboutBox.getContentPane().add(Close, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 310, -1, -1));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PangYa HWI Calculator");
        setIconImage(Toolkit.getDefaultToolkit().getImage(MainFrame.class.getResource("/images/ico.png")));
        setMinimumSize(new java.awt.Dimension(340, 410));
        setResizable(false);

        Power.setFont(new java.awt.Font("Tahoma", 0, 12));
        Power.setText("Power");
        Power.setToolTipText("Power");

        WindSpeedPower.setFont(new java.awt.Font("Tahoma", 0, 12));
        WindSpeedPower.setText("Wind Speed");
        WindSpeedPower.setToolTipText("Distance");

        PbTextField.setEditable(false);
        PbTextField.setToolTipText("Your Powerbar");

        HWICalculator.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        HWICalculator.setText("HWI Calculator");
        HWICalculator.setToolTipText("Calculate Horizontal Wind Effect");

        Result.setFont(new java.awt.Font("Tahoma", 0, 12));
        Result.setText("Result");
        Result.setToolTipText("Result");

        TerrainEffectComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "100% [Fairway, Ice]", "98% [Raining]", "95% [Rough]", "92% [Rough + Raining]", "90% [Rough, Bunker]", "85% [Bunker]" }));
        TerrainEffectComboBox.setToolTipText("Select Terrain Effect");

        Elevation.setFont(new java.awt.Font("Tahoma", 0, 12));
        Elevation.setText("Elevation");
        Elevation.setToolTipText("Elevation");

        TerrainEffect.setFont(new java.awt.Font("Tahoma", 0, 12));
        TerrainEffect.setText("Terrain Effect");
        TerrainEffect.setToolTipText("Terrain Effect");

        ResultInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Info.png"))); // NOI18N
        ResultInfo.setToolTipText("Final Calculation for you Power usage");

        TerrainEffectInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Info.png"))); // NOI18N
        TerrainEffectInfo.setToolTipText("Terrain means Status of you ball (Usually Percentage)");

        ElevationInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Info.png"))); // NOI18N
        ElevationInfo.setToolTipText("Elevation from Your position and position of the hole cup");

        WindDegreeInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Info.png"))); // NOI18N
        WindDegreeInfo.setToolTipText("Indicate where the wind blow");

        WindspeedpowerInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Info.png"))); // NOI18N

        PowerHWIInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Info.png"))); // NOI18N
        PowerHWIInfo.setToolTipText("Power that provided on HWI table");

        PBInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Info.png"))); // NOI18N
        PBInfo.setToolTipText("Final calculation for HWI (Pb means Power Bar)");

        PowerInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Info.png"))); // NOI18N
        PowerInfo.setToolTipText("Power that you have.Example : 1W = 250y, you write down 250 and 1W + Power = 260, then write down 260");

        WindSpeedInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Info.png"))); // NOI18N
        WindSpeedInfo.setToolTipText("Wind Speed value (xm)");

        HWIInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Info.png"))); // NOI18N
        HWIInfo.setToolTipText("HWI Modifier that provided at HWI Table");

        Pb.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Pb.setText("Pb");
        Pb.setToolTipText("Power Bar");

        HWITextField.setToolTipText("Insert HWI");
        HWITextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                HWITextFieldKeyPressed(evt);
            }
        });

        ResultTextField.setEditable(false);
        ResultTextField.setToolTipText("Your Result");

        Degree.setFont(new java.awt.Font("Tahoma", 0, 12));
        Degree.setText("Wind Degree");
        Degree.setToolTipText("Degree");

        PowerCalculator.setFont(new java.awt.Font("Tahoma 18", 0, 18));
        PowerCalculator.setText("Power Calculator");
        PowerCalculator.setToolTipText("Calculate your Power percentage");

        Windspeed.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Windspeed.setText("Wind Speed");
        Windspeed.setToolTipText("Wind Speed");

        WindDegreePower.setFont(new java.awt.Font("Tahoma", 0, 12));
        WindDegreePower.setText("Wind Degree");

        HWI.setFont(new java.awt.Font("Tahoma", 0, 12));
        HWI.setText("HWI");
        HWI.setToolTipText("HWI");

        WindDegreePowerTextField.setToolTipText("Insert Wind Degree");
        WindDegreePowerTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                WindDegreePowerTextFieldKeyPressed(evt);
            }
        });

        DegreeTextField.setToolTipText("Insert Wind Degree");
        DegreeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                DegreeTextFieldKeyPressed(evt);
            }
        });

        PowerHWI.setFont(new java.awt.Font("Tahoma", 0, 12));
        PowerHWI.setText("Power HWI");

        PowerHWITextField.setToolTipText("Insert Power from HWI Table");
        PowerHWITextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                PowerHWITextFieldKeyPressed(evt);
            }
        });

        DegreeInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Info.png"))); // NOI18N
        DegreeInfo.setToolTipText("Indicate where the wind blow");

        WindspeedTextField.setToolTipText("Insert Wind Speed");
        WindspeedTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                WindspeedTextFieldKeyPressed(evt);
            }
        });

        PowerTextField.setToolTipText("Insert Your Power");
        PowerTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                PowerTextFieldKeyPressed(evt);
            }
        });

        ElevationTextField.setToolTipText("Insert Elevation");
        ElevationTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ElevationTextFieldKeyPressed(evt);
            }
        });

        WindSpeedPowerTextField.setToolTipText("Insert Windspeed");
        WindSpeedPowerTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                WindSpeedPowerTextFieldKeyPressed(evt);
            }
        });

        Menu.setText("Menu");

        jMenu1.setText("Option");

        jCheckBoxMenuItem1.setText("Always on Top");
        jCheckBoxMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jCheckBoxMenuItem1);

        Menu.add(jMenu1);

        Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        Menu.add(Exit);

        MenuBar.add(Menu);

        Help.setText("Help");

        About.setText("About");
        About.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutActionPerformed(evt);
            }
        });
        Help.add(About);

        MenuBar.add(Help);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(HWICalculator))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(Windspeed)
                        .addGap(40, 40, 40)
                        .addComponent(WindSpeedInfo)
                        .addGap(10, 10, 10)
                        .addComponent(WindspeedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(Degree)
                        .addGap(35, 35, 35)
                        .addComponent(DegreeInfo)
                        .addGap(10, 10, 10)
                        .addComponent(DegreeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(HWI)
                        .addGap(83, 83, 83)
                        .addComponent(HWIInfo)
                        .addGap(10, 10, 10)
                        .addComponent(HWITextField, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(Pb)
                        .addGap(93, 93, 93)
                        .addComponent(PBInfo)
                        .addGap(10, 10, 10)
                        .addComponent(PbTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(PowerCalculator))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(Power)
                        .addGap(72, 72, 72)
                        .addComponent(PowerInfo)
                        .addGap(10, 10, 10)
                        .addComponent(PowerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(PowerHWI)
                        .addGap(44, 44, 44)
                        .addComponent(PowerHWIInfo)
                        .addGap(10, 10, 10)
                        .addComponent(PowerHWITextField, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(WindSpeedPower)
                        .addGap(40, 40, 40)
                        .addComponent(WindspeedpowerInfo)
                        .addGap(10, 10, 10)
                        .addComponent(WindSpeedPowerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(WindDegreePower)
                        .addGap(35, 35, 35)
                        .addComponent(WindDegreeInfo)
                        .addGap(10, 10, 10)
                        .addComponent(WindDegreePowerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(Elevation)
                        .addGap(58, 58, 58)
                        .addComponent(ElevationInfo)
                        .addGap(10, 10, 10)
                        .addComponent(ElevationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(TerrainEffect)
                        .addGap(32, 32, 32)
                        .addComponent(TerrainEffectInfo)
                        .addGap(10, 10, 10)
                        .addComponent(TerrainEffectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(Result)
                        .addGap(74, 74, 74)
                        .addComponent(ResultInfo)
                        .addGap(10, 10, 10)
                        .addComponent(ResultTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(HWICalculator)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Windspeed, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(WindSpeedInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(WindspeedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Degree, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DegreeInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DegreeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(HWI, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HWIInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HWITextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Pb, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PBInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PbTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(PowerCalculator)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Power)
                    .addComponent(PowerInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PowerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PowerHWI)
                    .addComponent(PowerHWIInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PowerHWITextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(WindSpeedPower))
                    .addComponent(WindspeedpowerInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(WindSpeedPowerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(WindDegreePower))
                    .addComponent(WindDegreeInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(WindDegreePowerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(Elevation))
                    .addComponent(ElevationInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ElevationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(TerrainEffect))
                    .addComponent(TerrainEffectInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TerrainEffectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Result)
                    .addComponent(ResultInfo)
                    .addComponent(ResultTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void HWITextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_HWITextFieldKeyPressed
        try {
            int key = evt.getKeyCode();
            if(key == KeyEvent.VK_ENTER) {
                Double Degree = Double.parseDouble(DegreeTextField.getText());
                Double Windspeed = Double.parseDouble(WindspeedTextField.getText());
                Double HWI = Double.parseDouble(HWITextField.getText());
                Double Pin = ((((Math.sin(Math.toRadians(Degree))))*Windspeed)*HWI);
                DecimalFormat twoDForm = new DecimalFormat("#.##");
                PbTextField.setText(twoDForm.format(Pin));
            }

        } catch(Exception E) {

        }
}//GEN-LAST:event_HWITextFieldKeyPressed

    private void WindDegreePowerTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_WindDegreePowerTextFieldKeyPressed
        try {
            int key = evt.getKeyCode();
            if(key == KeyEvent.VK_ENTER) {
                if(TerrainEffectComboBox.getSelectedIndex()==0) {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 0;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                } else if (TerrainEffectComboBox.getSelectedIndex()==1) {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 3;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                } else if (TerrainEffectComboBox.getSelectedIndex()==2) {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 4;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                } else if (TerrainEffectComboBox.getSelectedIndex()==3) {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 7;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                } else if (TerrainEffectComboBox.getSelectedIndex()==4) {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 8;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                } else if (TerrainEffectComboBox.getSelectedIndex()==5) {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 12;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }

            }
        } catch(Exception E) {

        }

    }//GEN-LAST:event_WindDegreePowerTextFieldKeyPressed

    private void DegreeTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DegreeTextFieldKeyPressed
        try {
            int key = evt.getKeyCode();
            if(key == KeyEvent.VK_ENTER) {
                Double Degree = Double.parseDouble(DegreeTextField.getText());
                Double Windspeed = Double.parseDouble(WindspeedTextField.getText());
                Double HWI = Double.parseDouble(HWITextField.getText());
                Double Pin = ((((Math.sin(Math.toRadians(Degree))))*Windspeed)*HWI);
                DecimalFormat twoDForm = new DecimalFormat("#.##");
                PbTextField.setText(twoDForm.format(Pin));
            }
        } catch(Exception E) {

        }
}//GEN-LAST:event_DegreeTextFieldKeyPressed

    private void PowerHWITextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PowerHWITextFieldKeyPressed
        try {
            int key = evt.getKeyCode();
            if(key == KeyEvent.VK_ENTER) {
                if(TerrainEffectComboBox.getSelectedIndex()==0) {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 0;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                } else if (TerrainEffectComboBox.getSelectedIndex()==1) {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 3;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                } else if (TerrainEffectComboBox.getSelectedIndex()==2) {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 4;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                } else if (TerrainEffectComboBox.getSelectedIndex()==3) {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 7;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                } else if (TerrainEffectComboBox.getSelectedIndex()==4) {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 8;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                } else if (TerrainEffectComboBox.getSelectedIndex()==5) {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 12;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }

            }
        } catch(Exception E) {

        }
}//GEN-LAST:event_PowerHWITextFieldKeyPressed

    private void WindspeedTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_WindspeedTextFieldKeyPressed
        try {
            int key = evt.getKeyCode();
            if(key == KeyEvent.VK_ENTER) {
                Double Degree = Double.parseDouble(DegreeTextField.getText());
                Double Windspeed = Double.parseDouble(WindspeedTextField.getText());
                Double HWI = Double.parseDouble(HWITextField.getText());
                Double Pin = ((((Math.sin(Math.toRadians(Degree))))*Windspeed)*HWI);
                DecimalFormat twoDForm = new DecimalFormat("#.##");
                PbTextField.setText(twoDForm.format(Pin));
            }
        } catch(Exception E) {

        }
}//GEN-LAST:event_WindspeedTextFieldKeyPressed

    private void PowerTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PowerTextFieldKeyPressed
        try {
            int key = evt.getKeyCode();
            if(key == KeyEvent.VK_ENTER) {
                if(TerrainEffectComboBox.getSelectedIndex()==0) {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 0;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                } else if (TerrainEffectComboBox.getSelectedIndex()==1) {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 3;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                } else if (TerrainEffectComboBox.getSelectedIndex()==2) {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 4;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                } else if (TerrainEffectComboBox.getSelectedIndex()==3) {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 7;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                } else if (TerrainEffectComboBox.getSelectedIndex()==4) {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 8;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                } else if (TerrainEffectComboBox.getSelectedIndex()==5) {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 12;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }

            }
        } catch(Exception E) {

        }
}//GEN-LAST:event_PowerTextFieldKeyPressed

    private void ElevationTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ElevationTextFieldKeyPressed
        try {
            int key = evt.getKeyCode();
            if(key == KeyEvent.VK_ENTER) {
                if(TerrainEffectComboBox.getSelectedIndex()==0) {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 0;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                } else if (TerrainEffectComboBox.getSelectedIndex()==1) {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 3;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                } else if (TerrainEffectComboBox.getSelectedIndex()==2) {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 4;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                } else if (TerrainEffectComboBox.getSelectedIndex()==3) {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 7;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                } else if (TerrainEffectComboBox.getSelectedIndex()==4) {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 8;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                } else if (TerrainEffectComboBox.getSelectedIndex()==5) {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 12;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }

            }
        } catch(Exception E) {

        }
}//GEN-LAST:event_ElevationTextFieldKeyPressed

    private void WindSpeedPowerTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_WindSpeedPowerTextFieldKeyPressed
        try {
            int key = evt.getKeyCode();
            if(key == KeyEvent.VK_ENTER) {
                if(TerrainEffectComboBox.getSelectedIndex()==0) {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 0;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                } else if (TerrainEffectComboBox.getSelectedIndex()==1) {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 3;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                } else if (TerrainEffectComboBox.getSelectedIndex()==2) {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 4;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                } else if (TerrainEffectComboBox.getSelectedIndex()==3) {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 7;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                } else if (TerrainEffectComboBox.getSelectedIndex()==4) {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 8;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                } else if (TerrainEffectComboBox.getSelectedIndex()==5) {
                    Double Power = Double.parseDouble(PowerTextField.getText());
                    Double PowerHWI = Double.parseDouble(PowerHWITextField.getText());
                    Double WindSpeedPower = Double.parseDouble(WindSpeedPowerTextField.getText());
                    Double WindDegreePower = Double.parseDouble(WindDegreePowerTextField.getText());
                    Double Elevation = Double.parseDouble(ElevationTextField.getText());
                    Integer TerrainEffect = 12;
                    Double Result = (PowerHWI + (((Elevation)/Power)*100) + (((((90-WindDegreePower)/90)*(-(WindSpeedPower)))/Power)*100) + ((TerrainEffect)/Power)*100);
                    DecimalFormat twoDForm = new DecimalFormat("#.##");
                    ResultTextField.setText(twoDForm.format(Result)+"%");
                }

            }
        } catch(Exception E) {

        }
}//GEN-LAST:event_WindSpeedPowerTextFieldKeyPressed

    private void AboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutActionPerformed
        AboutBox.setSize(AboutBox.getMinimumSize());
        AboutBox.setLocationRelativeTo(this);
        AboutBox.setVisible(true);
    }//GEN-LAST:event_AboutActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void CloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseActionPerformed
       AboutBox.dispose();
    }//GEN-LAST:event_CloseActionPerformed

    private void jCheckBoxMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ActionPerformed
        if(jCheckBoxMenuItem1.isSelected()==true)
        {
        setAlwaysOnTop(true);
        JOptionPane.showMessageDialog(this, "Always on top Enable", "Information",WIDTH);
        }
        else
        {
        setAlwaysOnTop(false);
        JOptionPane.showMessageDialog(this, "Always on top Disable", "Information",WIDTH);
        }
    }//GEN-LAST:event_jCheckBoxMenuItem1ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem About;
    private javax.swing.JDialog AboutBox;
    private javax.swing.JButton Close;
    private javax.swing.JLabel Degree;
    private javax.swing.JLabel DegreeInfo;
    private javax.swing.JTextField DegreeTextField;
    private javax.swing.JLabel Elevation;
    private javax.swing.JLabel ElevationInfo;
    private javax.swing.JTextField ElevationTextField;
    private javax.swing.JLabel EmailAdress;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JLabel HWI;
    private javax.swing.JLabel HWICalculator;
    private javax.swing.JLabel HWIInfo;
    private javax.swing.JTextField HWITextField;
    private javax.swing.JMenu Help;
    private javax.swing.JMenu Menu;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JLabel MySTiC;
    private javax.swing.JLabel PBInfo;
    private javax.swing.JLabel Pb;
    private javax.swing.JTextField PbTextField;
    private javax.swing.JLabel Power;
    private javax.swing.JLabel PowerCalculator;
    private javax.swing.JLabel PowerHWI;
    private javax.swing.JLabel PowerHWIInfo;
    private javax.swing.JTextField PowerHWITextField;
    private javax.swing.JLabel PowerInfo;
    private javax.swing.JTextField PowerTextField;
    private javax.swing.JLabel Result;
    private javax.swing.JLabel ResultInfo;
    private javax.swing.JTextField ResultTextField;
    private javax.swing.JLabel Rose;
    private javax.swing.JLabel SpecialThanks;
    private javax.swing.JLabel TerrainEffect;
    private javax.swing.JComboBox TerrainEffectComboBox;
    private javax.swing.JLabel TerrainEffectInfo;
    private javax.swing.JLabel WindDegreeInfo;
    private javax.swing.JLabel WindDegreePower;
    private javax.swing.JTextField WindDegreePowerTextField;
    private javax.swing.JLabel WindSpeedInfo;
    private javax.swing.JLabel WindSpeedPower;
    private javax.swing.JTextField WindSpeedPowerTextField;
    private javax.swing.JLabel Windspeed;
    private javax.swing.JTextField WindspeedTextField;
    private javax.swing.JLabel WindspeedpowerInfo;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JMenu jMenu1;
    // End of variables declaration//GEN-END:variables

}
